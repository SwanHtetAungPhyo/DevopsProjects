name: Reusable Go Application Workflow

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
        description: 'Application name (e.g., app-one)'
      app_display_name:
        required: true
        type: string
        description: 'Display name for the application'
      go_version:
        required: false
        type: string
        default: '1.21'
        description: 'Go version to use'
      working_directory:
        required: true
        type: string
        description: 'Working directory for the app'
      docker_registry:
        required: false
        type: string
        default: 'docker.io'
        description: 'Docker registry to push images'

jobs:
  test-and-build:
    name: 'Test & Build ${{ inputs.app_display_name }}'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}
          cache-dependency-path: ${{ inputs.working_directory }}/go.sum

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ inputs.app_name }}-${{ hashFiles(format('{0}/go.sum', inputs.working_directory)) }}
          restore-keys: |
            ${{ runner.os }}-go-${{ inputs.app_name }}-
            ${{ runner.os }}-go-

      - name: Download Dependencies
        run: go mod download

      - name: Verify Dependencies
        run: go mod verify

      - name: Run Go Vet
        run: go vet ./...

      - name: Run Go Fmt Check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Please run 'go fmt ./...' to format the code"
            gofmt -s -l .
            exit 1
          fi

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run Linters
        run: golangci-lint run ./... --timeout=5m
        continue-on-error: true

      - name: Run Tests
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate Coverage Report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ inputs.working_directory }}/coverage.out
          flags: ${{ inputs.app_name }}
          name: ${{ inputs.app_name }}-coverage

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app_name }}-coverage
          path: ${{ inputs.working_directory }}/coverage.html

      - name: Build Binary
        run: |
          mkdir -p bin
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            -ldflags="-w -s -X main.Version=${{ github.sha }}" \
            -o bin/${{ inputs.app_name }} \
            ./cmd/main.go

      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app_name }}-binary
          path: ${{ inputs.working_directory }}/bin/${{ inputs.app_name }}

  security-scan:
    name: 'Security Scan ${{ inputs.app_display_name }}'
    runs-on: ubuntu-latest
    needs: test-and-build

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go_version }}

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-exclude-generated -fmt text -out gosec-results.txt ./...'
        continue-on-error: true  # Don't fail the build on gosec errors

      - name: Display Gosec Results
        run: |
          if [ -f "gosec-results.txt" ]; then
            echo "=== Gosec Results ==="
            cat gosec-results.txt
          else
            echo "No gosec results file found"
          fi

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '${{ inputs.working_directory }}'
          format: 'table'
          exit-code: 0  # Don't fail build on vulnerabilities for now
        continue-on-error: true

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.app_name }}-security-reports
          path: |
            ${{ inputs.working_directory }}/gosec-results.txt
        if: always()

  docker-build-push:
    name: 'Docker Build & Push ${{ inputs.app_display_name }}'
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.app_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.working_directory }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.app_name }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.app_name }}:buildcache,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}

      - name: Run Trivy on Docker Image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ inputs.app_name }}:latest
          format: 'table'
          exit-code: 0  # Don't fail build for now
        continue-on-error: true