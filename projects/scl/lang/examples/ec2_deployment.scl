// EC2 Production Deployment with SCL
// Complete AWS EC2 server setup and application deployment
// Uses your Swan.pem key for SSH authentication

// Configuration for your EC2 instance
mode := "interpret";
setting := "configuration";
super_user := true;
on_error := "rollback";
target := "ec2-user@172.31.7.120";  // Your EC2 private IP

// Deployment configuration
declare environment: string = "production";
declare app_name: string = "my_web_app";
declare domain: string = "your-domain.com";
declare ssl_enabled: bool = true;
declare monitoring_enabled: bool = true;
declare backup_enabled: bool = true;

fn main() {
    print("🚀 AWS EC2 Production Deployment");
    print("================================");
    print("Target: " + target);
    print("Environment: " + environment);
    print("Application: " + app_name);
    print("");
    
    // Phase 1: System Analysis
    ec2_system_check();
    
    // Phase 2: Security Hardening
    security_setup();
    
    // Phase 3: Install Dependencies
    install_dependencies();
    
    // Phase 4: Application Deployment
    deploy_application();
    
    // Phase 5: Web Server Configuration
    configure_web_server();
    
    // Phase 6: SSL Setup
    if (ssl_enabled) {
        setup_ssl();
    }
    
    // Phase 7: Monitoring Setup
    if (monitoring_enabled) {
        setup_monitoring();
    }
    
    // Phase 8: Backup Configuration
    if (backup_enabled) {
        setup_backup();
    }
    
    // Phase 9: Final Verification
    verify_deployment();
    
    print("✅ EC2 deployment completed successfully!");
    print_deployment_info();
}

fn ec2_system_check() {
    print("📊 Phase 1: EC2 System Analysis");
    print("--------------------------------");
    
    // Get comprehensive EC2 system information
    print("🔍 Analyzing EC2 instance...");
    sysinfo();
    
    // Monitor system performance
    print("📈 Checking system performance...");
    monitor();
    
    // Security audit
    print("🔒 Initial security assessment...");
    audit();
    
    print("✅ EC2 system analysis completed");
    print("");
}

fn security_setup() {
    print("🔐 Phase 2: Security Hardening");
    print("-------------------------------");
    
    // Update system packages first
    print("📦 Updating system packages...");
    package("update", "");
    
    // Install security tools
    print("🛡️ Installing security tools...");
    package("install", "fail2ban");
    package("install", "ufw");
    
    // Configure firewall
    print("🔥 Configuring firewall...");
    firewall("enable");
    firewall("allow", "22/tcp");    // SSH
    firewall("allow", "80/tcp");    // HTTP
    firewall("allow", "443/tcp");   // HTTPS
    
    // Start security services
    service("enable", "fail2ban");
    service("start", "fail2ban");
    
    // Create application user
    print("👤 Creating application user...");
    user("add", "appuser");
    user("sudo", "appuser");
    
    print("✅ Security hardening completed");
    print("");
}

fn install_dependencies() {
    print("📦 Phase 3: Installing Dependencies");
    print("------------------------------------");
    
    // Web server
    print("🌐 Installing Nginx...");
    package("install", "nginx");
    
    // Node.js (for modern web apps)
    print("📗 Installing Node.js...");
    package("install", "nodejs");
    package("install", "npm");
    
    // Database
    print("🗄️ Installing database...");
    package("install", "postgresql");
    
    // Development tools
    print("🛠️ Installing development tools...");
    package("install", "git");
    package("install", "curl");
    package("install", "htop");
    
    // Docker (for containerized apps)
    print("🐳 Installing Docker...");
    package("install", "docker");
    
    print("✅ Dependencies installed");
    print("");
}

fn deploy_application() {
    print("🚀 Phase 4: Application Deployment");
    print("-----------------------------------");
    
    // Create application directories
    print("📁 Creating application structure...");
    create("/var/www/" + app_name, "index.html", "644");
    create("/var/www/" + app_name + "/static", "style.css", "644");
    create("/var/www/" + app_name + "/api", "server.js", "644");
    create("/var/log/" + app_name, "app.log", "644");
    create("/etc/" + app_name, "config.json", "600");
    
    // Copy application files (you'd replace these with real files)
    print("📋 Deploying application files...");
    // Note: In real deployment, you'd copy actual files:
    // copy("dist/index.html", "/var/www/" + app_name + "/index.html");
    // copy("config/production.json", "/etc/" + app_name + "/config.json");
    
    // Set proper permissions
    print("🔐 Setting file permissions...");
    create("/var/www/" + app_name + "/uploads", "README.txt", "755");
    
    print("✅ Application deployed");
    print("");
}

fn configure_web_server() {
    print("🌐 Phase 5: Web Server Configuration");
    print("------------------------------------");
    
    // Create Nginx configuration
    print("⚙️ Configuring Nginx...");
    create("/etc/nginx/sites-available", app_name + ".conf", "644");
    
    // Enable the site (simulate linking)
    create("/etc/nginx/sites-enabled", app_name + ".conf", "644");
    
    // Test Nginx configuration
    print("🧪 Testing Nginx configuration...");
    webserver("nginx", "test");
    
    // Start and enable Nginx
    print("🚀 Starting Nginx...");
    service("enable", "nginx");
    service("start", "nginx");
    
    print("✅ Web server configured");
    print("");
}

fn setup_ssl() {
    print("🔐 Phase 6: SSL Configuration");
    print("------------------------------");
    
    // Install Certbot for Let's Encrypt
    print("📜 Installing SSL certificate tools...");
    package("install", "certbot");
    package("install", "python3-certbot-nginx");
    
    if (environment == "production") {
        print("🌐 Setting up Let's Encrypt SSL...");
        cert("letsencrypt", domain);
    } else {
        print("🔒 Creating self-signed certificate...");
        cert("generate_self_signed", domain);
    }
    
    // Update Nginx for SSL
    print("🔄 Updating Nginx for SSL...");
    webserver("nginx", "reload");
    
    print("✅ SSL configured");
    print("");
}

fn setup_monitoring() {
    print("📊 Phase 7: Monitoring Setup");
    print("-----------------------------");
    
    // Install monitoring tools
    print("📈 Installing monitoring tools...");
    package("install", "htop");
    package("install", "iotop");
    
    // Setup log monitoring
    print("📋 Configuring log monitoring...");
    logs("/var/log/nginx/access.log", "", 10);
    logs("/var/log/nginx/error.log", "error", 5);
    logs("/var/log/" + app_name + "/app.log", "", 10);
    
    // System performance monitoring
    print("⚡ Setting up performance monitoring...");
    monitor();
    
    // Setup monitoring cron jobs
    print("⏰ Setting up automated monitoring...");
    cron("add", "*/5 * * * *", "/usr/local/bin/health-check.sh", "root");
    cron("add", "0 */6 * * *", "/usr/local/bin/system-report.sh", "root");
    
    print("✅ Monitoring configured");
    print("");
}

fn setup_backup() {
    print("💾 Phase 8: Backup Configuration");
    print("---------------------------------");
    
    // Create backup directories
    print("📁 Creating backup structure...");
    create("/backup", "README.txt", "755");
    create("/backup/daily", "info.txt", "755");
    create("/backup/weekly", "info.txt", "755");
    
    // Setup backup scripts
    print("📜 Setting up backup automation...");
    cron("add", "0 2 * * *", "/usr/local/bin/daily-backup.sh", "root");
    cron("add", "0 3 * * 0", "/usr/local/bin/weekly-backup.sh", "root");
    
    // Initial backup
    print("💾 Creating initial backup...");
    backup("backup", "/var/www/" + app_name, "/backup/initial-deployment.tar.gz");
    backup("backup", "/etc/" + app_name, "/backup/initial-config.tar.gz");
    
    print("✅ Backup system configured");
    print("");
}

fn verify_deployment() {
    print("✅ Phase 9: Deployment Verification");
    print("------------------------------------");
    
    // Check all services
    print("🔍 Verifying services...");
    service("status", "nginx");
    service("status", "postgresql");
    service("status", "fail2ban");
    
    // Network connectivity tests
    print("🌐 Testing network connectivity...");
    nettest("localhost:80", "telnet");
    
    if (ssl_enabled) {
        nettest("localhost:443", "telnet");
    }
    
    // Security verification
    print("🔒 Security verification...");
    firewall("status");
    audit();
    
    // Performance check
    print("📊 Final performance check...");
    monitor();
    
    print("✅ Deployment verification completed");
    print("");
}

fn print_deployment_info() {
    print("🎯 Deployment Information");
    print("=========================");
    print("");
    print("🌐 Your application is deployed at:");
    print("   HTTP:  http://" + domain);
    
    if (ssl_enabled) {
        print("   HTTPS: https://" + domain);
    }
    
    print("");
    print("📁 Application files:");
    print("   • Web root: /var/www/" + app_name + "/");
    print("   • Config: /etc/" + app_name + "/");
    print("   • Logs: /var/log/" + app_name + "/");
    print("   • Backups: /backup/");
    print("");
    
    print("🔧 Management commands:");
    print("   • Check status: systemctl status nginx");
    print("   • View logs: tail -f /var/log/nginx/access.log");
    print("   • Restart app: systemctl restart nginx");
    print("");
    
    print("🔒 Security features:");
    print("   ✓ Firewall configured (UFW)");
    print("   ✓ Fail2ban protection active");
    
    if (ssl_enabled) {
        print("   ✓ SSL/TLS encryption enabled");
    }
    
    print("   ✓ Application user created");
    print("");
    
    if (monitoring_enabled) {
        print("📊 Monitoring:");
        print("   ✓ System monitoring active");
        print("   ✓ Log monitoring configured");
        print("   ✓ Automated health checks");
        print("");
    }
    
    if (backup_enabled) {
        print("💾 Backup:");
        print("   ✓ Daily backups scheduled");
        print("   ✓ Weekly backups scheduled");
        print("   ✓ Initial backup created");
        print("");
    }
    
    print("🚀 Your EC2 instance is production-ready!");
}