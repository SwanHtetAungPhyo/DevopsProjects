// Local Development Environment Setup
// A practical SCL script for setting up a development environment locally
// Demonstrates real-world usage patterns and conditional logic

// Configuration
mode := "interpret";
setting := "configuration";
super_user := true;
on_error := "rollback";

// Development environment configuration
declare project_name: string = "my_web_app";
declare setup_git: bool = true;
declare create_docker_config: bool = true;
declare setup_nginx_config: bool = true;
declare create_ssl_certs: bool = false;
declare environment: string = "development";

fn main() {
    print("🚀 Local Development Environment Setup");
    print("=====================================");
    print("Project: " + project_name);
    print("Environment: " + environment);
    print("");
    
    // Phase 1: System Check
    pre_setup_check();
    
    // Phase 2: Project Structure
    create_project_structure();
    
    // Phase 3: Configuration Files
    setup_configurations();
    
    // Phase 4: Development Tools
    setup_development_tools();
    
    // Phase 5: Optional Features
    setup_optional_features();
    
    // Phase 6: Verification
    verify_setup();
    
    print("✅ Development environment setup completed!");
    print_next_steps();
}

fn pre_setup_check() {
    print("🔍 Phase 1: Pre-Setup System Check");
    print("-----------------------------------");
    
    // Analyze current system
    print("📊 Analyzing system capabilities...");
    sysinfo();
    
    print("✅ System check completed");
    print("");
}

fn create_project_structure() {
    print("📁 Phase 2: Creating Project Structure");
    print("---------------------------------------");
    
    // Create main project directory
    print("🏗️  Creating project directory structure...");
    
    // Main project directory
    create("/tmp/" + project_name, "README.md", "644");
    
    // Source code directories
    create("/tmp/" + project_name + "/src", "index.js", "644");
    create("/tmp/" + project_name + "/src/components", "App.js", "644");
    create("/tmp/" + project_name + "/src/utils", "helpers.js", "644");
    
    // Configuration directories
    create("/tmp/" + project_name + "/config", "app.json", "644");
    create("/tmp/" + project_name + "/config/environments", "development.json", "644");
    create("/tmp/" + project_name + "/config/environments", "production.json", "600");
    
    // Documentation
    create("/tmp/" + project_name + "/docs", "API.md", "644");
    create("/tmp/" + project_name + "/docs", "DEPLOYMENT.md", "644");
    
    // Tests
    create("/tmp/" + project_name + "/tests", "app.test.js", "644");
    create("/tmp/" + project_name + "/tests/unit", "helpers.test.js", "644");
    create("/tmp/" + project_name + "/tests/integration", "api.test.js", "644");
    
    // Build and deployment
    create("/tmp/" + project_name + "/build", "build.sh", "755");
    create("/tmp/" + project_name + "/deploy", "deploy.sh", "755");
    
    print("✅ Project structure created in /tmp/" + project_name);
    print("");
}

fn setup_configurations() {
    print("⚙️  Phase 3: Setting Up Configuration Files");
    print("--------------------------------------------");
    
    // Package.json equivalent
    print("📦 Creating package configuration...");
    create("/tmp/" + project_name, "package.json", "644");
    
    // Environment configurations
    print("🌍 Creating environment configurations...");
    
    if (environment == "development") {
        create("/tmp/" + project_name + "/config", ".env.development", "600");
        create("/tmp/" + project_name + "/config", "webpack.dev.js", "644");
    } else {
        create("/tmp/" + project_name + "/config", ".env.production", "600");
        create("/tmp/" + project_name + "/config", "webpack.prod.js", "644");
    }
    
    // Docker configuration
    if (create_docker_config) {
        print("🐳 Creating Docker configuration...");
        create("/tmp/" + project_name, "Dockerfile", "644");
        create("/tmp/" + project_name, "docker-compose.yml", "644");
        create("/tmp/" + project_name, ".dockerignore", "644");
    }
    
    // Nginx configuration
    if (setup_nginx_config) {
        print("🌐 Creating Nginx configuration...");
        create("/tmp/" + project_name + "/config/nginx", "nginx.conf", "644");
        create("/tmp/" + project_name + "/config/nginx", "sites-available.conf", "644");
    }
    
    print("✅ Configuration files created");
    print("");
}

fn setup_development_tools() {
    print("🛠️  Phase 4: Development Tools Setup");
    print("-------------------------------------");
    
    // Linting and formatting
    print("📝 Setting up code quality tools...");
    create("/tmp/" + project_name, ".eslintrc.json", "644");
    create("/tmp/" + project_name, ".prettierrc", "644");
    create("/tmp/" + project_name, ".gitignore", "644");
    
    // Testing configuration
    print("🧪 Setting up testing framework...");
    create("/tmp/" + project_name, "jest.config.js", "644");
    create("/tmp/" + project_name + "/tests", "setup.js", "644");
    
    // Build tools
    print("🔨 Setting up build tools...");
    create("/tmp/" + project_name + "/scripts", "build.js", "755");
    create("/tmp/" + project_name + "/scripts", "start.js", "755");
    create("/tmp/" + project_name + "/scripts", "test.js", "755");
    
    // CI/CD configuration
    print("🚀 Setting up CI/CD configuration...");
    create("/tmp/" + project_name + "/.github/workflows", "ci.yml", "644");
    create("/tmp/" + project_name + "/.github/workflows", "deploy.yml", "644");
    
    print("✅ Development tools configured");
    print("");
}

fn setup_optional_features() {
    print("🎯 Phase 5: Optional Features Setup");
    print("------------------------------------");
    
    // Git repository setup
    if (setup_git) {
        print("📚 Setting up Git repository...");
        create("/tmp/" + project_name, ".gitattributes", "644");
        create("/tmp/" + project_name + "/.github", "CONTRIBUTING.md", "644");
        create("/tmp/" + project_name + "/.github", "ISSUE_TEMPLATE.md", "644");
        create("/tmp/" + project_name + "/.github", "PULL_REQUEST_TEMPLATE.md", "644");
    }
    
    // SSL certificates for local development
    if (create_ssl_certs) {
        print("🔐 Setting up SSL certificates...");
        create("/tmp/" + project_name + "/ssl", "localhost.crt", "600");
        create("/tmp/" + project_name + "/ssl", "localhost.key", "600");
        create("/tmp/" + project_name + "/ssl", "ca.crt", "644");
    }
    
    // Monitoring and logging
    print("📊 Setting up monitoring...");
    create("/tmp/" + project_name + "/logs", "application.log", "644");
    create("/tmp/" + project_name + "/logs", "error.log", "644");
    create("/tmp/" + project_name + "/logs", "access.log", "644");
    
    // Database setup (if applicable)
    if (environment == "development") {
        print("🗄️  Setting up development database...");
        create("/tmp/" + project_name + "/database", "schema.sql", "644");
        create("/tmp/" + project_name + "/database/migrations", "001_initial.sql", "644");
        create("/tmp/" + project_name + "/database/seeds", "development.sql", "644");
    }
    
    print("✅ Optional features configured");
    print("");
}

fn verify_setup() {
    print("✅ Phase 6: Setup Verification");
    print("-------------------------------");
    
    // Verify project structure
    print("🔍 Verifying project structure...");
    
    // Get system information to show the setup environment
    print("📊 Final system state:");
    sysinfo();
    
    print("📁 Project structure verification:");
    print("   ✓ Source code directories created");
    print("   ✓ Configuration files generated");
    print("   ✓ Development tools configured");
    print("   ✓ Build and deployment scripts ready");
    
    if (create_docker_config) {
        print("   ✓ Docker configuration ready");
    }
    
    if (setup_nginx_config) {
        print("   ✓ Nginx configuration ready");
    }
    
    if (setup_git) {
        print("   ✓ Git repository structure ready");
    }
    
    print("✅ Setup verification completed");
    print("");
}

fn print_next_steps() {
    print("🎯 Next Steps");
    print("=============");
    print("");
    print("Your development environment is ready! Here's what you can do:");
    print("");
    print("1. 📁 Explore the project structure:");
    print("   ls -la /tmp/" + project_name + "/");
    print("   tree /tmp/" + project_name + "/ (if tree is installed)");
    print("");
    print("2. 📝 View created files:");
    print("   find /tmp/" + project_name + " -type f | head -20");
    print("");
    print("3. 🔍 Check specific directories:");
    print("   ls -la /tmp/" + project_name + "/src/");
    print("   ls -la /tmp/" + project_name + "/config/");
    print("   ls -la /tmp/" + project_name + "/tests/");
    print("");
    
    if (create_docker_config) {
        print("4. 🐳 Docker files ready:");
        print("   cat /tmp/" + project_name + "/Dockerfile");
        print("   cat /tmp/" + project_name + "/docker-compose.yml");
        print("");
    }
    
    print("5. 🧹 Clean up when done:");
    print("   rm -rf /tmp/" + project_name + "/");
    print("   rm -rf /tmp/scl_*");
    print("");
    print("🚀 Happy coding with SCL!");
}