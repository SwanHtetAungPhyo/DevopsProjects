package modules

import (
	"fmt"

	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws"
	"github.com/pulumi/pulumi-aws/sdk/v7/go/aws/ec2"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rs/zerolog/log"
)

type EC2Args struct {
	InstanceType string
	VpcId        pulumi.IDOutput
	SubnetId     pulumi.StringInput
	KeyName      string
	UserData     string
	Tags         map[string]string
}

type EC2Instance struct {
	InstanceId    pulumi.IDOutput
	PublicIp      pulumi.StringOutput
	PublicDns     pulumi.StringOutput
	PrivateIp     pulumi.StringOutput
	SecurityGroup pulumi.IDOutput
}

func NewEC2(
	ctx *pulumi.Context,
	name string,
	args EC2Args,
	provider *aws.Provider,
) (*EC2Instance, error) {
	sg, err := ec2.NewSecurityGroup(ctx, name, &ec2.SecurityGroupArgs{
		VpcId:       args.VpcId,
		Description: pulumi.Sprintf("Generated by Pulumi %s for the event-driven MicroService Application", ctx.Project()),
		Ingress: ec2.SecurityGroupIngressArray{
			ec2.SecurityGroupIngressArgs{
				Protocol: pulumi.String("tcp"),
				FromPort: pulumi.Int(80),
				ToPort:   pulumi.Int(80),
			},
			ec2.SecurityGroupIngressArgs{
				Protocol: pulumi.String("tcp"),
				FromPort: pulumi.Int(22),
				ToPort:   pulumi.Int(22),
			},
			ec2.SecurityGroupIngressArgs{
				Protocol: pulumi.String("tcp"),
				FromPort: pulumi.Int(443),
				ToPort:   pulumi.Int(443),
			},
		},
		Egress: ec2.SecurityGroupEgressArray{
			ec2.SecurityGroupEgressArgs{
				Protocol: pulumi.String("-1"),
				FromPort: pulumi.Int(0),
				ToPort:   pulumi.Int(0),
				CidrBlocks: pulumi.StringArray{
					pulumi.String("0.0.0.0/0"),
				},
			},
		},
		Tags: pulumi.ToStringMap(args.Tags),
	}, pulumi.Provider(provider))
	if err != nil {
		log.Err(err).Msg("Error creating security group")
		return nil, err
	}
	ami, err := ec2.LookupAmi(ctx, &ec2.LookupAmiArgs{
		MostRecent: pulumi.BoolRef(true),
		Owners:     []string{"amazon"},
		Filters: []ec2.GetAmiFilter{
			{
				Name:   "name",
				Values: []string{"amzn2-ami-hvm-*-x86_64-gp2"},
			},
		},
	}, pulumi.Provider(provider))
	if err != nil {
		return nil, err
	}

	instanceArgs := &ec2.InstanceArgs{
		InstanceType:             pulumi.String(args.InstanceType),
		Ami:                      pulumi.String(ami.Id),
		SubnetId:                 args.SubnetId,
		VpcSecurityGroupIds:      pulumi.StringArray{sg.ID()},
		AssociatePublicIpAddress: pulumi.Bool(true),
		Tags:                     pulumi.ToStringMap(args.Tags),
	}

	if args.KeyName != "" {
		instanceArgs.KeyName = pulumi.String(args.KeyName)
	}
	if args.UserData != "" {
		instanceArgs.UserData = pulumi.String(args.UserData)
	}
	instance, err := ec2.NewInstance(ctx, fmt.Sprintf(
		"%s-instance",
		name,
	), instanceArgs, pulumi.Provider(provider))
	if err != nil {
		return nil, err
	}

	log.Info().Msg("Instance created")
	return &EC2Instance{
		InstanceId:    instance.ID(),
		PublicIp:      instance.PublicIp,
		PublicDns:     instance.PublicDns,
		PrivateIp:     instance.PrivateIp,
		SecurityGroup: sg.ID(),
	}, nil

}
