// Ubuntu Docker DevOps Demo - Complete SCL demonstration
// This script shows all SCL capabilities on a Docker Ubuntu container

// Configuration
mode := "interpret";
setting := "configuration";
super_user := true;
on_error := "rollback";
target := "ubuntu@localhost:2222";  // Docker container SSH

// Demo configuration
declare environment: string = "development";
declare app_name: string = "scl_demo_app";
declare setup_web_server: bool = true;
declare setup_database: bool = true;
declare create_users: bool = true;
declare setup_monitoring: bool = true;

fn main() {
    print("🐳 Ubuntu Docker DevOps Demo with SCL");
    print("=====================================");
    print("Target: " + target);
    print("Environment: " + environment);
    print("Application: " + app_name);
    print("");
    
    // Phase 1: System Discovery
    system_discovery();
    
    // Phase 2: User Management
    if (create_users) {
        user_management_demo();
    }
    
    // Phase 3: Package Management
    package_management_demo();
    
    // Phase 4: File Operations
    file_operations_demo();
    
    // Phase 5: Web Server Setup
    if (setup_web_server) {
        web_server_demo();
    }
    
    // Phase 6: Database Operations
    if (setup_database) {
        database_demo();
    }
    
    // Phase 7: Security Configuration
    security_demo();
    
    // Phase 8: Monitoring Setup
    if (setup_monitoring) {
        monitoring_demo();
    }
    
    // Phase 9: Network Testing
    network_testing_demo();
    
    // Phase 10: Backup Operations
    backup_demo();
    
    // Phase 11: Final Verification
    final_verification();
    
    print("✅ Ubuntu Docker DevOps Demo completed successfully!");
    print_summary();
}

fn system_discovery() {
    print("🔍 Phase 1: System Discovery");
    print("-----------------------------");
    
    // Comprehensive system analysis
    print("📊 Analyzing Ubuntu system...");
    sysinfo();
    
    // Performance monitoring
    print("📈 System performance metrics...");
    monitor();
    
    // Security audit
    print("🔒 Initial security assessment...");
    audit();
    
    print("✅ System discovery completed");
    print("");
}

fn user_management_demo() {
    print("👥 Phase 2: User Management Demo");
    print("---------------------------------");
    
    // Create application users
    print("👤 Creating application users...");
    user("add", "appuser");
    user("add", "webuser");
    
    // Set passwords
    print("🔐 Setting user passwords...");
    user("passwd", "appuser", "secure123");
    user("passwd", "webuser", "web123");
    
    // Grant sudo access
    print("⚡ Granting sudo access...");
    user("sudo", "appuser");
    
    print("✅ User management demo completed");
    print("");
}

fn package_management_demo() {
    print("📦 Phase 3: Package Management Demo");
    print("------------------------------------");
    
    // Update package lists
    print("🔄 Updating package lists...");
    package("update", "");
    
    // Install development tools
    print("🛠️ Installing development tools...");
    package("install", "build-essential");
    package("install", "python3-dev");
    package("install", "nodejs");
    
    // Install system utilities
    print("🔧 Installing system utilities...");
    package("install", "htop");
    package("install", "tree");
    package("install", "jq");
    
    // Install security tools
    print("🛡️ Installing security tools...");
    package("install", "ufw");
    package("install", "fail2ban");
    
    print("✅ Package management demo completed");
    print("");
}

fn file_operations_demo() {
    print("📁 Phase 4: File Operations Demo");
    print("---------------------------------");
    
    // Create application directory structure
    print("🏗️ Creating application structure...");
    create("/opt/" + app_name, "README.md", "644");
    create("/opt/" + app_name + "/bin", "start.sh", "755");
    create("/opt/" + app_name + "/config", "app.conf", "600");
    create("/opt/" + app_name + "/logs", "application.log", "644");
    create("/opt/" + app_name + "/data", "sample.json", "644");
    
    // Create web application structure
    print("🌐 Creating web application structure...");
    create("/var/www/" + app_name, "index.html", "644");
    create("/var/www/" + app_name + "/css", "style.css", "644");
    create("/var/www/" + app_name + "/js", "app.js", "644");
    create("/var/www/" + app_name + "/images", "logo.png", "644");
    
    // Create configuration files
    print("⚙️ Creating configuration files...");
    create("/etc/" + app_name, "main.conf", "600");
    create("/etc/" + app_name, "database.conf", "600");
    create("/etc/" + app_name + "/ssl", "cert.pem", "600");
    
    print("✅ File operations demo completed");
    print("");
}

fn web_server_demo() {
    print("🌐 Phase 5: Web Server Demo");
    print("----------------------------");
    
    // Configure Nginx
    print("⚙️ Configuring Nginx...");
    create("/etc/nginx/sites-available", app_name + ".conf", "644");
    
    // Test Nginx configuration
    print("🧪 Testing Nginx configuration...");
    webserver("nginx", "test");
    
    // Start and enable Nginx
    print("🚀 Starting Nginx service...");
    service("start", "nginx");
    service("enable", "nginx");
    
    // Check service status
    print("📊 Checking Nginx status...");
    service("status", "nginx");
    
    print("✅ Web server demo completed");
    print("");
}

fn database_demo() {
    print("🗄️ Phase 6: Database Demo");
    print("--------------------------");
    
    // Start PostgreSQL
    print("🚀 Starting PostgreSQL...");
    service("start", "postgresql");
    
    // Check database status
    print("📊 Checking database status...");
    database("postgresql", "status");
    
    // Create database directories
    print("📁 Creating database structure...");
    create("/var/lib/" + app_name + "/db", "schema.sql", "600");
    create("/var/lib/" + app_name + "/backups", "backup_info.txt", "644");
    
    print("✅ Database demo completed");
    print("");
}

fn security_demo() {
    print("🔒 Phase 7: Security Demo");
    print("--------------------------");
    
    // Configure firewall
    print("🔥 Configuring firewall...");
    firewall("allow", "22/tcp");    // SSH
    firewall("allow", "80/tcp");    // HTTP
    firewall("allow", "443/tcp");   // HTTPS
    firewall("status");
    
    // Start security services
    print("🛡️ Starting security services...");
    service("start", "fail2ban");
    service("enable", "fail2ban");
    
    // Security audit
    print("🔍 Running security audit...");
    audit();
    
    print("✅ Security demo completed");
    print("");
}

fn monitoring_demo() {
    print("📊 Phase 8: Monitoring Demo");
    print("----------------------------");
    
    // System monitoring
    print("📈 System performance monitoring...");
    monitor();
    
    // Log analysis
    print("📋 Log analysis...");
    logs("/var/log/syslog", "systemd", 5);
    logs("/var/log/nginx/access.log", "", 3);
    logs("/var/log/" + app_name + "/application.log", "", 5);
    
    // Setup monitoring cron jobs
    print("⏰ Setting up monitoring automation...");
    cron("add", "*/5 * * * *", "/usr/local/bin/health-check.sh", "root");
    cron("add", "0 */6 * * *", "/usr/local/bin/system-report.sh", "root");
    
    print("✅ Monitoring demo completed");
    print("");
}

fn network_testing_demo() {
    print("🌐 Phase 9: Network Testing Demo");
    print("---------------------------------");
    
    // Internal connectivity tests
    print("🧪 Testing internal connectivity...");
    nettest("localhost:80", "telnet");
    nettest("localhost:22", "telnet");
    
    // External connectivity tests
    print("🌍 Testing external connectivity...");
    nettest("google.com", "ping");
    nettest("github.com:443", "telnet");
    
    // DNS tests
    print("🔍 DNS resolution tests...");
    nettest("ubuntu.com", "nslookup");
    
    print("✅ Network testing demo completed");
    print("");
}

fn backup_demo() {
    print("💾 Phase 10: Backup Demo");
    print("-------------------------");
    
    // Create backup directories
    print("📁 Setting up backup structure...");
    create("/backup", "README.txt", "755");
    create("/backup/daily", "info.txt", "755");
    create("/backup/weekly", "info.txt", "755");
    
    // Perform backups
    print("💾 Creating application backups...");
    backup("backup", "/opt/" + app_name, "/backup/app_backup.tar.gz");
    backup("backup", "/etc/" + app_name, "/backup/config_backup.tar.gz");
    backup("backup", "/var/www/" + app_name, "/backup/web_backup.tar.gz");
    
    // Setup automated backups
    print("⏰ Setting up automated backups...");
    cron("add", "0 2 * * *", "/usr/local/bin/daily-backup.sh", "root");
    cron("add", "0 3 * * 0", "/usr/local/bin/weekly-backup.sh", "root");
    
    print("✅ Backup demo completed");
    print("");
}

fn final_verification() {
    print("✅ Phase 11: Final Verification");
    print("--------------------------------");
    
    // Verify all services
    print("🔍 Verifying services...");
    service("status", "ssh");
    service("status", "nginx");
    service("status", "postgresql");
    
    // Final system check
    print("📊 Final system analysis...");
    sysinfo();
    monitor();
    
    // Security verification
    print("🔒 Final security check...");
    firewall("status");
    
    print("✅ Final verification completed");
    print("");
}

fn print_summary() {
    print("📋 Demo Summary");
    print("===============");
    print("");
    print("🎯 SCL Operations Demonstrated:");
    print("   ✓ System discovery and analysis");
    print("   ✓ User management and security");
    print("   ✓ Package management (apt)");
    print("   ✓ File and directory operations");
    print("   ✓ Web server configuration");
    print("   ✓ Database management");
    print("   ✓ Security configuration");
    print("   ✓ System monitoring");
    print("   ✓ Network testing");
    print("   ✓ Backup operations");
    print("");
    
    print("📁 Created Structure:");
    print("   • Application: /opt/" + app_name + "/");
    print("   • Web files: /var/www/" + app_name + "/");
    print("   • Configuration: /etc/" + app_name + "/");
    print("   • Backups: /backup/");
    print("");
    
    print("🌐 Services Running:");
    print("   • SSH (port 2222 → 22)");
    print("   • Nginx (port 8080 → 80)");
    print("   • PostgreSQL");
    print("   • Fail2ban");
    print("");
    
    print("🧪 Test Your Deployment:");
    print("   • SSH: ssh -p 2222 ubuntu@localhost");
    print("   • Web: http://localhost:8080");
    print("   • Explore: docker exec -it scl-ubuntu-test bash");
    print("");
    
    print("🧹 Cleanup:");
    print("   docker-compose -f docker-ubuntu-test/docker-compose.yml down");
    print("");
    
    print("🚀 Your SCL language successfully managed a complete Ubuntu server!");
}